{
  "tech_stack": [
    "TypeScript",
    "Node.js",
    "Express",
    "Python",
    "FastAPI",
    "PostgreSQL",
    "ChromaDB",
    "Redis",
    "JWT",
    "WebSocket",
    "HTML/CSS/JavaScript",
    "Docker",
    "Railway"
  ],
  "features": [
    {
      "name": "Zantara AI Assistant",
      "description": "Core AI assistant with chat interface, JWT authentication, and knowledge management",
      "files": [
        "apps/webapp/chat.html",
        "apps/webapp/js/send-message-updated.js",
        "apps/webapp/js/api-config-unified.js",
        "apps/webapp/js/jwt-login.js",
        "apps/webapp/js/zantara-knowledge.js"
      ]
    },
    {
      "name": "JWT Authentication System",
      "description": "Complete JWT authentication with login, refresh, and logout endpoints",
      "files": [
        "apps/backend-ts/src/middleware/jwt-auth.ts",
        "apps/backend-ts/src/routing/router.ts",
        "apps/webapp/js/jwt-login.js"
      ]
    },
    {
      "name": "TS Backend API",
      "description": "TypeScript backend with Express, health checks, and Zantara knowledge endpoints",
      "files": [
        "apps/backend-ts/src/index.ts",
        "apps/backend-ts/src/routing/router.ts",
        "apps/backend-ts/src/handlers/zantara/knowledge.ts",
        "apps/backend-ts/Dockerfile"
      ]
    },
    {
      "name": "RAG Backend System",
      "description": "Python RAG backend with ChromaDB, knowledge retrieval, and AI processing",
      "files": [
        "apps/backend-rag/backend/main.py",
        "apps/backend-rag/backend/Dockerfile"
      ]
    },
    {
      "name": "Frontend Chat Interface",
      "description": "Web-based chat interface with Enter key support, streaming responses, and PWA features",
      "files": [
        "apps/webapp/chat.html",
        "apps/webapp/js/chat-input-fix.js",
        "apps/webapp/js/send-message-updated.js",
        "apps/webapp/dashboard.html"
      ]
    },
    {
      "name": "API Configuration",
      "description": "Unified API configuration with intelligent routing between RAG and TS backends",
      "files": [
        "apps/webapp/js/api-config-unified.js"
      ]
    },
    {
      "name": "Knowledge Management",
      "description": "Zantara knowledge system with system prompts, health monitoring, and project awareness",
      "files": [
        "apps/backend-ts/src/handlers/zantara/knowledge.ts",
        "apps/webapp/js/zantara-knowledge.js"
      ]
    },
    {
      "name": "Docker Deployment",
      "description": "Docker containerization for both backends with Railway deployment",
      "files": [
        "apps/backend-ts/Dockerfile",
        "apps/backend-rag/backend/Dockerfile",
        "apps/backend-ts/.dockerignore",
        "apps/backend-rag/backend/.dockerignore"
      ]
    },
    {
      "name": "Health Monitoring",
      "description": "Comprehensive health checks and monitoring for all services",
      "files": [
        "apps/backend-ts/src/routing/router.ts",
        "apps/backend-rag/backend/main.py"
      ]
    },
    {
      "name": "Database Integration",
      "description": "PostgreSQL and ChromaDB integration for data persistence and vector storage",
      "files": [
        "apps/backend-rag/backend/data/chroma/",
        "data/chroma/"
      ]
    }
  ]
}