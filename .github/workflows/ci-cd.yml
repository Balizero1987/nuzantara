name: Zantara Bridge CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: involuted-box-469105-r0
  REGION: asia-southeast2
  SERVICE_NAME: zantara-bridge-v2-prod
  REGISTRY: gcr.io
  IMAGE_NAME: zantara-bridge

jobs:
  # Job 1: Code Quality & Security
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Run linting
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run type checking
        run: npm run build

      - name: Run security audit
        run: npm audit --audit-level=high || echo "Security audit completed"

      - name: Run tests
        run: npm test || echo "Tests completed"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
        continue-on-error: true

  # Job 2: Build & Push Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 3: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-zantara-bridge-himaadsxua-et.a.run.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image=${{ needs.build-and-push.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=2 \
            --concurrency=100 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=staging,LOG_LEVEL=debug" \
            --tag=staging-${{ github.sha }} \
            --no-traffic

      - name: Run smoke tests
        run: |
          STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --format="value(status.url)")
          curl -f "$STAGING_URL/health" || exit 1
          echo "Staging deployment successful: $STAGING_URL"

      - name: Route traffic to new revision
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }}-staging \
            --to-revisions=staging-${{ github.sha }}=100 \
            --region=${{ env.REGION }}

  # Job 5: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Get staging URL
        id: staging-url
        run: |
          gcloud auth activate-service-account --key-file=<(echo '${{ secrets.GOOGLE_CLOUD_SA_KEY }}')
          STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --format="value(status.url)")
          echo "url=$STAGING_URL" >> $GITHUB_OUTPUT

      - name: Run performance tests
        run: |
          # Update test config with staging URL
          sed -i "s|https://zantara-bridge-v2-prod-himaadsxua-et.a.run.app|${{ steps.staging-url.outputs.url }}|g" performance/load-test.yml
          artillery run performance/load-test.yml --output performance-report.json

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            performance-report.json
            performance-report.html

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://zantara-bridge-v2-prod-himaadsxua-et.a.run.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run (Production) - Blue/Green
        run: |
          # Deploy new version without traffic
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ needs.build-and-push.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=4Gi \
            --cpu=4 \
            --concurrency=100 \
            --max-instances=50 \
            --min-instances=1 \
            --set-env-vars="NODE_ENV=production,LOG_LEVEL=info" \
            --tag=blue-${{ github.sha }} \
            --no-traffic

      - name: Health check new revision
        run: |
          BLUE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.traffic[0].url)")
          for i in {1..5}; do
            if curl -f "$BLUE_URL/health"; then
              echo "Health check passed"
              break
            fi
            echo "Health check failed, retrying in 10s..."
            sleep 10
          done

      - name: Gradual traffic shift (10%)
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions=blue-${{ github.sha }}=10 \
            --region=${{ env.REGION }}
          sleep 60

      - name: Monitor metrics and shift more traffic (50%)
        run: |
          # Check error rate and latency
          ERROR_RATE=$(gcloud logging read "resource.type=cloud_run_revision AND severity>=ERROR" --limit=10 --format="value(timestamp)" | wc -l)
          if [ "$ERROR_RATE" -lt 5 ]; then
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --to-revisions=blue-${{ github.sha }}=50 \
              --region=${{ env.REGION }}
            sleep 60
          else
            echo "High error rate detected, rolling back"
            exit 1
          fi

      - name: Full traffic shift (100%)
        run: |
          ERROR_RATE=$(gcloud logging read "resource.type=cloud_run_revision AND severity>=ERROR" --limit=10 --format="value(timestamp)" | wc -l)
          if [ "$ERROR_RATE" -lt 3 ]; then
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --to-revisions=blue-${{ github.sha }}=100 \
              --region=${{ env.REGION }}
          else
            echo "High error rate detected, rolling back"
            exit 1
          fi

      - name: Update CDN cache
        run: |
          gcloud compute url-maps invalidate-cdn-cache zantara-cdn-urlmap \
            --path="/*" \
            --async || echo "CDN cache invalidation skipped"

      - name: Notification
        if: always()
        run: |
          STATUS=${{ job.status }}
          if [ "$STATUS" = "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  # Job 7: Cleanup
  cleanup:
    name: Cleanup Old Revisions
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Cleanup old revisions
        run: |
          # Keep only last 5 revisions
          gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(metadata.name)" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=100 | tail -n +6 | while read revision; do
              echo "Deleting old revision: $revision"
              gcloud run revisions delete "$revision" --region=${{ env.REGION }} --quiet || true
            done

      - name: Cleanup old images
        run: |
          # Keep only last 10 images
          gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }} \
            --format="get(digest)" \
            --sort-by="~timestamp" \
            --limit=100 | tail -n +11 | while read digest; do
              echo "Deleting old image: $digest"
              gcloud container images delete "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}@$digest" --quiet || true
            done