name: Validate Intel Scraping Output

on:
  workflow_dispatch:
    paths:
      - 'INTEL_SCRAPING/**/*.json'
      - 'scripts/intel_schema_validator.py'
      - 'config/categories_v2.json'
      - 'config/category_guardrails.json'

jobs:
  validate-schema:
    name: Validate Intel JSON Schema Stage 2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # No external dependencies needed for validator

      - name: Validate Intel Scraping Output
        id: validate
        run: |
          echo "üîç Validating intel scraping JSON files..."

          # Run validator on INTEL_SCRAPING directory
          python3 scripts/intel_schema_validator.py --validate-dir INTEL_SCRAPING/ > validation_report.txt 2>&1 || true

          # Display report
          cat validation_report.txt

          # Check if validation passed (exit code 0 = all valid)
          if python3 scripts/intel_schema_validator.py --validate-dir INTEL_SCRAPING/; then
            echo "‚úÖ All intel files passed Stage 2 validation"
            echo "validation_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some intel files failed Stage 2 validation (see report above)"
            echo "validation_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intel-validation-report
          path: validation_report.txt
          retention-days: 7

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.validate.outputs.validation_status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation_report.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ùå Intel Scraping Validation Failed

Some intel files failed Stage 2 schema validation. Please fix the issues below:

\`\`\`
${report}
\`\`\`

**Next steps**:
1. Review validation errors above
2. Fix JSON schema issues (missing fields, invalid dates, etc.)
3. Run locally: \`python3 scripts/intel_schema_validator.py --validate-dir INTEL_SCRAPING/\`
4. Push fixes and re-run CI
              `
            });

  quality-metrics:
    name: Intel Quality Metrics
    runs-on: ubuntu-latest
    needs: validate-schema

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Calculate Quality Metrics
        run: |
          echo "üìä Calculating intel quality metrics..."

          # Count files by category
          echo "### Files by Category:"
          for dir in INTEL_SCRAPING/*/; do
            category=$(basename "$dir")
            count=$(find "$dir" -name "*.json" | wc -l | tr -d ' ')
            echo "  - $category: $count files"
          done

          # Check tier distribution (requires jq)
          echo ""
          echo "### Tier Distribution:"
          if command -v jq &> /dev/null; then
            tier1=$(find INTEL_SCRAPING -name "*.json" -exec jq -r '.tier' {} \; 2>/dev/null | grep -c "^1$" || echo 0)
            tier2=$(find INTEL_SCRAPING -name "*.json" -exec jq -r '.tier' {} \; 2>/dev/null | grep -c "^2$" || echo 0)
            total=$(find INTEL_SCRAPING -name "*.json" | wc -l | tr -d ' ')

            if [ "$total" -gt 0 ]; then
              tier1_pct=$((tier1 * 100 / total))
              echo "  - Tier 1: $tier1 files ($tier1_pct%)"
              echo "  - Tier 2: $tier2 files ($((100 - tier1_pct))%)"

              # Target: ‚â•60% Tier 1 for CRITICAL categories
              if [ "$tier1_pct" -lt 60 ]; then
                echo "‚ö†Ô∏è  WARNING: Tier 1 percentage below target (60%)"
              fi
            fi
          else
            echo "  (jq not installed, skipping tier analysis)"
          fi

      - name: Check for Duplicates
        run: |
          echo ""
          echo "### Duplicate Detection:"

          # Simple duplicate check by content hash
          if command -v jq &> /dev/null; then
            duplicates=$(find INTEL_SCRAPING -name "*.json" -exec jq -r '.content_hash // .source_url' {} \; 2>/dev/null | sort | uniq -d | wc -l | tr -d ' ')

            if [ "$duplicates" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found $duplicates potential duplicates"
              echo "Run deduplication: python3 scripts/intel_dedup.py"
            else
              echo "‚úÖ No duplicates detected"
            fi
          fi
