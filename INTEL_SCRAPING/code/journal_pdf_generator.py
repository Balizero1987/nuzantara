#!/usr/bin/env python3
"""
BALI ZERO JOURNAL - PDF Generator
High-quality magazine-style PDF generation

Uses WeasyPrint for professional PDF rendering from HTML/CSS
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime
from weasyprint import HTML, CSS
from jinja2 import Template

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BaliZeroJournalPDF:
    """Generate beautiful PDF magazine from journal JSON"""

    def __init__(self, logo_path: str = None):
        self.logo_path = logo_path or "/Users/antonellosiano/Desktop/BZ JOURNAL.png"

    def generate_pdf(self, journal_data: Dict[str, Any], output_path: Path) -> Path:
        """Generate PDF from journal data"""
        logger.info(f"üìÑ Generating PDF: {output_path}")

        # Create HTML from journal data
        html_content = self._create_html(journal_data)

        # Generate PDF with WeasyPrint
        HTML(string=html_content).write_pdf(
            output_path,
            stylesheets=[CSS(string=self._get_css())]
        )

        logger.info(f"‚úÖ PDF created: {output_path} ({output_path.stat().st_size / 1024:.1f} KB)")
        return output_path

    def _create_html(self, journal_data: Dict[str, Any]) -> str:
        """Create HTML content for PDF"""

        template = Template("""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Bali Zero Journal - {{ date }}</title>
</head>
<body>
    <!-- COVER PAGE -->
    <div class="cover-page">
        <div class="cover-header">
            <img src="{{ logo_path }}" alt="Bali Zero Journal" class="logo">
            <h1 class="main-title">BALI ZERO JOURNAL</h1>
            <p class="tagline">Business Intelligence for Indonesia</p>
            <p class="date">{{ date_formatted }}</p>
        </div>

        <div class="cover-stories">
            <h2 class="section-title">TODAY'S TOP STORIES</h2>
            {% for story in cover_stories[:3] %}
            <div class="cover-story">
                {% if story.generated_image and 'placeholder' not in story.generated_image.lower() %}
                <img src="file://{{ story.generated_image }}" alt="{{ story.title }}" class="story-image">
                {% endif %}
                <h3 class="story-title">{{ loop.index }}. {{ story.title }}</h3>
                <p class="story-summary">{{ story.summary }}</p>
                <span class="story-category">{{ story.category | upper }}</span>
            </div>
            {% endfor %}
        </div>

        <div class="cover-footer">
            <p><strong>{{ total_articles }}</strong> stories | <strong>{{ sections|length }}</strong> sections</p>
            <p class="editorial-note">{{ editorial_note }}</p>
        </div>
    </div>

    <!-- TABLE OF CONTENTS -->
    <div class="toc-page">
        <h2 class="page-title">TABLE OF CONTENTS</h2>
        <div class="toc-list">
            {% for section in sections %}
            <div class="toc-item">
                <span class="toc-title">{{ section.section_title }}</span>
                <span class="toc-count">{{ section.articles|length }} articles</span>
            </div>
            {% endfor %}
        </div>
    </div>

    <!-- ARTICLES BY SECTION -->
    {% for section in sections %}
    <div class="section-page">
        <h2 class="section-header">{{ section.section_title }}</h2>

        {% for article in section.articles %}
        <div class="article">
            <h3 class="article-title">{{ article.polished_title }}</h3>
            <div class="article-meta">
                <span class="article-category">{{ article.category }}</span>
                <span class="article-importance">Priority: {{ article.importance }}/10</span>
            </div>
            <div class="article-content">
                {{ article.summary }}
            </div>
        </div>
        {% endfor %}
    </div>
    {% endfor %}

    <!-- BACK COVER -->
    <div class="back-cover">
        <h2>BALI ZERO</h2>
        <p class="back-info">PT. BALI NOL IMPERSARIAT</p>
        <p class="back-info">üìç Kerobokan, Bali, Indonesia</p>
        <p class="back-info">üìß info@balizero.com | üì± +62 859 0436 9574</p>
        <p class="back-info">üåê welcome.balizero.com | üì∏ @balizero0</p>
        <p class="back-tagline">"From Zero to Infinity ‚àû"</p>
        <p class="back-footer">Generated by ZANTARA AI | {{ generated_at }}</p>
    </div>
</body>
</html>
""")

        date_str = journal_data.get('date', datetime.now().strftime('%Y-%m-%d'))
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')

        return template.render(
            logo_path=f"file://{self.logo_path}",
            date=date_str,
            date_formatted=date_obj.strftime('%B %d, %Y'),
            cover_stories=journal_data.get('cover_stories', []),
            sections=journal_data.get('sections', []),
            total_articles=journal_data.get('total_articles', 0),
            editorial_note=journal_data.get('editorial_note', ''),
            generated_at=datetime.now().strftime('%Y-%m-%d %H:%M')
        )

    def _get_css(self) -> str:
        """Get CSS styling for PDF"""
        return """
@page {
    size: A4;
    margin: 0;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Georgia', serif;
    color: #1a1a1a;
    line-height: 1.6;
}

/* COVER PAGE */
.cover-page {
    page-break-after: always;
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    color: white;
    padding: 60px 40px;
    height: 297mm;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.cover-header {
    text-align: center;
    border-bottom: 3px solid #ff6d01;
    padding-bottom: 30px;
}

.logo {
    width: 150px;
    height: 150px;
    margin-bottom: 20px;
    border-radius: 50%;
}

.main-title {
    font-size: 48px;
    font-weight: bold;
    letter-spacing: 4px;
    margin: 20px 0 10px 0;
    color: white;
}

.tagline {
    font-size: 18px;
    font-style: italic;
    color: #cccccc;
    margin-bottom: 10px;
}

.date {
    font-size: 16px;
    color: #ff6d01;
    font-weight: bold;
}

.cover-stories {
    flex: 1;
    padding: 40px 20px;
}

.section-title {
    font-size: 24px;
    color: #ff6d01;
    border-bottom: 2px solid #ff6d01;
    padding-bottom: 10px;
    margin-bottom: 30px;
    text-transform: uppercase;
    letter-spacing: 2px;
}

.cover-story {
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #444;
}

.story-image {
    width: 100%;
    max-height: 200px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 15px;
    border: 2px solid #ff6d01;
}

.story-title {
    font-size: 22px;
    margin-bottom: 10px;
    color: white;
    line-height: 1.3;
}

.story-summary {
    font-size: 14px;
    color: #cccccc;
    margin-bottom: 10px;
    line-height: 1.5;
}

.story-category {
    display: inline-block;
    background: #ff6d01;
    color: white;
    padding: 4px 12px;
    border-radius: 3px;
    font-size: 11px;
    font-weight: bold;
    text-transform: uppercase;
}

.cover-footer {
    text-align: center;
    padding-top: 20px;
    border-top: 2px solid #ff6d01;
}

.cover-footer p {
    color: #cccccc;
    font-size: 14px;
    margin: 10px 0;
}

.editorial-note {
    font-style: italic;
    color: #aaaaaa;
    font-size: 13px;
}

/* TABLE OF CONTENTS */
.toc-page {
    page-break-after: always;
    padding: 60px 50px;
    background: #f5f5f5;
    height: 297mm;
}

.page-title {
    font-size: 36px;
    color: #1a1a1a;
    border-bottom: 3px solid #ff6d01;
    padding-bottom: 15px;
    margin-bottom: 40px;
}

.toc-list {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.toc-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
    font-size: 16px;
}

.toc-item:last-child {
    border-bottom: none;
}

.toc-title {
    font-weight: bold;
    color: #1a1a1a;
}

.toc-count {
    color: #666;
    font-size: 14px;
}

/* SECTION PAGES */
.section-page {
    page-break-after: always;
    padding: 60px 50px;
}

.section-header {
    font-size: 32px;
    color: #1a1a1a;
    border-left: 5px solid #ff6d01;
    padding-left: 20px;
    margin-bottom: 40px;
}

/* ARTICLES */
.article {
    margin-bottom: 40px;
    padding-bottom: 30px;
    border-bottom: 2px solid #eee;
}

.article:last-child {
    border-bottom: none;
}

.article-title {
    font-size: 20px;
    color: #1a1a1a;
    margin-bottom: 10px;
    line-height: 1.4;
}

.article-meta {
    display: flex;
    gap: 15px;
    margin-bottom: 15px;
}

.article-category {
    background: #f0f0f0;
    color: #666;
    padding: 4px 10px;
    border-radius: 3px;
    font-size: 11px;
    font-weight: bold;
    text-transform: uppercase;
}

.article-importance {
    color: #ff6d01;
    font-size: 11px;
    font-weight: bold;
}

.article-content {
    font-size: 14px;
    color: #333;
    line-height: 1.7;
}

/* BACK COVER */
.back-cover {
    background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
    color: white;
    padding: 80px 60px;
    text-align: center;
    height: 297mm;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.back-cover h2 {
    font-size: 48px;
    margin-bottom: 30px;
    letter-spacing: 6px;
    color: #ff6d01;
}

.back-info {
    font-size: 16px;
    margin: 10px 0;
    color: #cccccc;
}

.back-tagline {
    font-size: 24px;
    font-style: italic;
    margin: 40px 0;
    color: white;
}

.back-footer {
    margin-top: 50px;
    font-size: 12px;
    color: #888;
}
"""


def main():
    """Test PDF generation"""
    import sys

    if len(sys.argv) < 2:
        print("Usage: python journal_pdf_generator.py <journal_json_file>")
        print("Example: python journal_pdf_generator.py INTEL_SCRAPING/data/JOURNAL/test_fallback.json")
        sys.exit(1)

    json_file = Path(sys.argv[1])

    if not json_file.exists():
        print(f"‚ùå File not found: {json_file}")
        sys.exit(1)

    # Load journal data
    journal_data = json.loads(json_file.read_text())

    # Generate PDF
    pdf_gen = BaliZeroJournalPDF()
    output_pdf = json_file.parent / f"BaliZeroJournal_{datetime.now().strftime('%Y%m%d')}.pdf"

    pdf_path = pdf_gen.generate_pdf(journal_data, output_pdf)

    print(f"‚úÖ PDF generated: {pdf_path}")
    print(f"üìÑ Size: {pdf_path.stat().st_size / 1024:.1f} KB")
    print(f"\nüöÄ Open with: open {pdf_path}")


if __name__ == "__main__":
    main()
