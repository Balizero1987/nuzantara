/**
 * Handler Migration Script
 *
 * Migrates from flat structure to module-functional structure
 *
 * OLD (flat):
 * handlers/
 *   gmail.ts
 *   drive.ts
 *   calendar.ts
 *   ai.ts
 *
 * NEW (module-functional):
 * handlers/
 *   google-workspace/
 *     gmail.ts
 *     drive.ts
 *     calendar.ts
 *   ai-services/
 *     anthropic.ts
 *     openai.ts
 *   bali-zero/
 *     pricing.ts
 *     kbli.ts
 */

export interface ModuleMapping {
  module: string;
  handlers: string[];  // handler file names
}

/**
 * Module-Functional structure map
 */
export const MODULE_STRUCTURE: ModuleMapping[] = [
  {
    module: 'google-workspace',
    handlers: [
      'gmail',
      'drive',
      'drive-multipart',
      'calendar',
      'docs',
      'sheets',
      'slides',
      'contacts'
    ]
  },
  {
    module: 'ai-services',
    handlers: [
      'ai',
      'ai-enhanced',
      'advanced-ai',
      'creative'
    ]
  },
  {
    module: 'bali-zero',
    handlers: [
      'bali-zero-pricing',
      'kbli',
      'advisory',
      'oracle',
      'team'
    ]
  },
  {
    module: 'zantara',
    handlers: [
      'zantara-test',
      'zantara-v2-simple',
      'zantara-dashboard',
      'zantara-brilliant',
      'zantaraKnowledgeHandler'
    ]
  },
  {
    module: 'communication',
    handlers: [
      'communication',
      'whatsapp',
      'translate'
    ]
  },
  {
    module: 'analytics',
    handlers: [
      'analytics',
      'dashboard-analytics',
      'weekly-report',
      'daily-drive-recap'
    ]
  },
  {
    module: 'memory',
    handlers: [
      'memory',
      'memory-firestore',
      'conversation-autosave'
    ]
  },
  {
    module: 'identity',
    handlers: [
      'identity'
    ]
  },
  {
    module: 'rag',
    handlers: [
      'rag'
    ]
  },
  {
    module: 'maps',
    handlers: [
      'maps'
    ]
  }
];

/**
 * Generate migration plan (for manual execution)
 */
export function generateMigrationPlan(): string[] {
  const commands: string[] = [];

  commands.push('# ZANTARA Handler Migration Plan');
  commands.push('# Execute these commands from /src/handlers/');
  commands.push('');

  // Create module directories
  const modules = MODULE_STRUCTURE.map(m => m.module).filter((v, i, a) => a.indexOf(v) === i);
  for (const module of modules) {
    commands.push(`mkdir -p ${module}`);
  }

  commands.push('');

  // Move files to modules
  for (const { module, handlers } of MODULE_STRUCTURE) {
    commands.push(`# Module: ${module}`);
    for (const handler of handlers) {
      commands.push(`mv ${handler}.ts ${module}/${handler}.ts 2>/dev/null || echo "⚠️  ${handler}.ts not found"`);
    }
    commands.push('');
  }

  // Create index files for each module
  commands.push('# Create module index files');
  for (const { module, handlers } of MODULE_STRUCTURE) {
    const exports = handlers.map(h => `export * from './${h}.ts';`).join('\n');
    commands.push(`cat > ${module}/index.ts <<'EOF'`);
    commands.push(`/**`);
    commands.push(` * ${module.toUpperCase()} Module`);
    commands.push(` * Auto-generated module index`);
    commands.push(` */`);
    commands.push(exports);
    commands.push('EOF');
    commands.push('');
  }

  return commands;
}

/**
 * Generate router imports for new structure
 */
export function generateRouterImports(): string {
  const imports: string[] = [];

  imports.push('// === AUTO-GENERATED MODULE IMPORTS ===');
  imports.push('// Generated by migrate-handlers.ts');
  imports.push('');

  for (const { module } of MODULE_STRUCTURE) {
    imports.push(`// ${module.toUpperCase()}`);
    imports.push(`import * as ${module.replace(/-/g, '_')} from './handlers/${module}/index.ts';`);
  }

  imports.push('');
  imports.push('// === END AUTO-GENERATED IMPORTS ===');

  return imports.join('\n');
}

/**
 * Print migration plan (CLI mode)
 */
export function printMigrationPlan() {
  const plan = generateMigrationPlan();
  console.log(plan.join('\n'));

  console.log('\n\n=== NEW ROUTER IMPORTS ===\n');
  console.log(generateRouterImports());
}

// Auto-run if executed directly
printMigrationPlan();
