#!/usr/bin/env node

// ZANTARA v5.2.0 Production Test Suite
// Tests all critical handlers after deployment

import https from 'https';
import http from 'http';

const SERVICE_URL = 'https://zantara-v520-chatgpt-patch-1064094238013.europe-west1.run.app';
const API_KEY = 'zantara-internal-dev-key-2025';\n\nclass ProductionTester {\n    constructor() {\n        this.passed = 0;\n        this.failed = 0;\n        this.results = [];\n    }\n\n    async makeRequest(path, options = {}) {\n        return new Promise((resolve, reject) => {\n            const url = new URL(SERVICE_URL + path);\n            const reqOptions = {\n                hostname: url.hostname,\n                port: url.port || 443,\n                path: url.pathname + url.search,\n                method: options.method || 'GET',\n                headers: {\n                    'x-api-key': API_KEY,\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'ZANTARA-Test/5.2.0',\n                    ...options.headers\n                }\n            };\n\n            const req = https.request(reqOptions, (res) => {\n                let data = '';\n                res.on('data', chunk => data += chunk);\n                res.on('end', () => {\n                    try {\n                        const parsed = data ? JSON.parse(data) : {};\n                        resolve({ status: res.statusCode, data: parsed, raw: data });\n                    } catch (e) {\n                        resolve({ status: res.statusCode, data: null, raw: data });\n                    }\n                });\n            });\n\n            req.on('error', reject);\n            \n            if (options.body) {\n                req.write(JSON.stringify(options.body));\n            }\n            \n            req.end();\n        });\n    }\n\n    async test(name, testFn) {\n        try {\n            console.log(`üß™ Testing: ${name}`);\n            const result = await testFn();\n            if (result.success) {\n                console.log(`‚úÖ ${name}: ${result.message}`);\n                this.passed++;\n            } else {\n                console.log(`‚ùå ${name}: ${result.message}`);\n                this.failed++;\n            }\n            this.results.push({ name, ...result });\n        } catch (error) {\n            console.log(`üí• ${name}: ERROR - ${error.message}`);\n            this.failed++;\n            this.results.push({ name, success: false, message: error.message });\n        }\n    }\n\n    async runTests() {\n        console.log('üöÄ ZANTARA v5.2.0 Production Test Suite Starting...');\n        console.log('=' .repeat(60));\n\n        // Test 1: Health Check\n        await this.test('Health Check', async () => {\n            const response = await this.makeRequest('/health');\n            if (response.status === 200 && response.data?.status === 'healthy') {\n                return { success: true, message: `Version ${response.data.version}, uptime: ${response.data.uptime}s` };\n            }\n            return { success: false, message: `Status ${response.status}: ${response.raw}` };\n        });\n\n        // Test 2: Contact Info (Public endpoint)\n        await this.test('Contact Info Endpoint', async () => {\n            const response = await this.makeRequest('/contact.info');\n            if (response.status === 200 && response.data?.company === 'Bali Zero') {\n                return { success: true, message: `Company: ${response.data.company}` };\n            }\n            return { success: false, message: `Status ${response.status}` };\n        });\n\n        // Test 3: API Documentation\n        await this.test('OpenAPI Specification', async () => {\n            const response = await this.makeRequest('/openapi-v520-custom-gpt.yaml');\n            if (response.status === 200 && response.raw.includes('ZANTARA API')) {\n                return { success: true, message: 'OpenAPI spec available' };\n            }\n            return { success: false, message: `Status ${response.status}` };\n        });\n\n        // Test 4: AI Chat Handler\n        await this.test('AI Chat Handler', async () => {\n            const response = await this.makeRequest('/ai.chat', {\n                method: 'POST',\n                body: {\n                    prompt: 'Hello, this is a production test. Please respond briefly.',\n                    model: 'gemini'\n                }\n            });\n            if (response.status === 200 && response.data?.response) {\n                return { success: true, message: `AI responded: ${response.data.response.substring(0, 50)}...` };\n            }\n            return { success: false, message: `Status ${response.status}: ${response.data?.error || response.raw}` };\n        });\n\n        // Test 5: Identity Resolution\n        await this.test('Identity Resolution', async () => {\n            const response = await this.makeRequest('/identity.resolve', {\n                method: 'POST',\n                body: {\n                    email: 'zero@balizero.com'\n                }\n            });\n            if (response.status === 200) {\n                return { success: true, message: 'Identity resolved successfully' };\n            }\n            return { success: false, message: `Status ${response.status}: ${response.data?.error || response.raw}` };\n        });\n\n        // Test 6: Handler Call - Sheets Create (OAuth2 Test)\n        await this.test('OAuth2 Sheets Handler', async () => {\n            const response = await this.makeRequest('/call', {\n                method: 'POST',\n                body: {\n                    key: 'sheets.create',\n                    params: {\n                        title: 'ZANTARA v5.2.0 Production Test',\n                        data: [['Test', 'Status', 'Timestamp'], ['Production Deployment', 'Success', new Date().toISOString()]]\n                    }\n                }\n            });\n            if (response.status === 200 && response.data?.ok) {\n                return { success: true, message: `Sheet created: ${response.data.data?.spreadsheetId}` };\n            }\n            return { success: false, message: `Status ${response.status}: ${response.data?.error || response.raw}` };\n        });\n\n        // Test 7: Lead Save\n        await this.test('Lead Save Handler', async () => {\n            const response = await this.makeRequest('/lead.save', {\n                method: 'POST',\n                body: {\n                    name: 'Production Test User',\n                    email: 'test@zantara-production.test',\n                    service: 'Company Setup',\n                    details: 'Production deployment test',\n                    urgency: 'normal'\n                }\n            });\n            if (response.status === 200 && response.data?.leadId) {\n                return { success: true, message: `Lead saved: ${response.data.leadId}` };\n            }\n            return { success: false, message: `Status ${response.status}: ${response.data?.error || response.raw}` };\n        });\n\n        // Test 8: Metrics Endpoint\n        await this.test('System Metrics', async () => {\n            const response = await this.makeRequest('/metrics');\n            if (response.status === 200 && response.data?.requests) {\n                return { success: true, message: `Requests: ${response.data.requests.total}, Errors: ${response.data.requests.errors}` };\n            }\n            return { success: false, message: `Status ${response.status}` };\n        });\n\n        this.printResults();\n    }\n\n    printResults() {\n        console.log('\\n' + '=' .repeat(60));\n        console.log('üèÅ PRODUCTION TEST RESULTS');\n        console.log('=' .repeat(60));\n        console.log(`‚úÖ Passed: ${this.passed}`);\n        console.log(`‚ùå Failed: ${this.failed}`);\n        console.log(`üìä Success Rate: ${Math.round((this.passed / (this.passed + this.failed)) * 100)}%`);\n        \n        if (this.failed > 0) {\n            console.log('\\n‚ùå FAILED TESTS:');\n            this.results.filter(r => !r.success).forEach(r => {\n                console.log(`  ‚Ä¢ ${r.name}: ${r.message}`);\n            });\n        }\n        \n        if (this.passed >= 6) {\n            console.log('\\nüéâ PRODUCTION DEPLOYMENT SUCCESSFUL!');\n            console.log('‚úÖ Custom GPT can connect to ZANTARA v5.2.0');\n        } else {\n            console.log('\\n‚ö†Ô∏è  PRODUCTION ISSUES DETECTED');\n            console.log('üîç Check Cloud Run logs for detailed error information');\n        }\n    }\n}\n\n// Run tests\nconst tester = new ProductionTester();\ntester.runTests().catch(console.error);